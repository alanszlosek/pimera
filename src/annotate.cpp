#include "annotate.hpp"

#define letter_width 5
#define letter_height 7
#define letter_length 5*7

uint8_t scale = 2;



uint8_t empty[letter_length] = {
    0,0,0,0,0,
    0,0,0,0,0,
    0,0,0,0,0,
    0,0,0,0,0,
    0,0,0,0,0,
    0,0,0,0,0,
    0,0,0,0,0
};
// 0123456789
uint8_t letters[][letter_length] = {
    // space, ascii 32
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },
    // !
    {0,0,1,0,0,
     0,0,1,0,0,
     0,0,1,0,0,
     0,0,1,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,1,0,0
    },
    // "
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },
    // #
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },
    // $
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },
    // %
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },
    // &
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },
    // '
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },
    // (
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },
    // )
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },
    // *
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },
    // +
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },
    // ,
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },
    // -
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,1,1,1,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },
    // .
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },
    // /
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
     0,0,0,0,0
    },

    // 0
    {1,1,1,1,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,1,1,1,1
    },
    // 1
    {0,0,1,0,0,
     0,1,1,0,0,
     1,0,1,0,0,
     0,0,1,0,0,
     0,0,1,0,0,
     0,0,1,0,0,
     1,1,1,1,1
    },
    // 2
    {1,1,1,1,1,
     0,0,0,0,1,
     0,0,0,0,1,
     1,1,1,1,1,
     1,0,0,0,0,
     1,0,0,0,0,
     1,1,1,1,1
    },
    // 3
    {1,1,1,1,1,
     0,0,0,0,1,
     0,0,0,0,1,
     1,1,1,1,1,
     0,0,0,0,1,
     0,0,0,0,1,
     1,1,1,1,1
    },
    // 4
    {1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,1,1,1,1,
     0,0,0,0,1,
     0,0,0,0,1,
     0,0,0,0,1
    },
    // 5
    {1,1,1,1,1,
     1,0,0,0,0,
     1,0,0,0,0,
     1,1,1,1,1,
     0,0,0,0,1,
     0,0,0,0,1,
     1,1,1,1,1
    },
    // 6
    {1,1,1,1,1,
     1,0,0,0,0,
     1,0,0,0,0,
     1,1,1,1,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,1,1,1,1
    },
    // 7
    {1,1,1,1,1,
     0,0,0,1,0,
     0,0,0,1,0,
     0,0,1,0,0,
     0,0,1,0,0,
     0,1,0,0,0,
     0,1,0,0,0
    },
    // 8
    {1,1,1,1,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,1,1,1,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,1,1,1,1
    },
    // 9
    {1,1,1,1,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,1,1,1,1,
     0,0,0,0,1,
     0,0,0,0,1,
     0,0,0,0,1
    },
    // :
    {0,0,0,0,0,
     0,0,0,0,0,
     0,0,1,0,0,
     0,0,0,0,0,
     0,0,1,0,0,
     0,0,0,0,0,
     0,0,0,0,0,
    }
};


void _annotate(uint8_t* letter, uint8_t* buffer, int startIndex, int stride) {
    int i = 0;

    uint8_t* buffer_row = buffer + startIndex;
    for (int row = 0; row < letter_height; row++) {
        uint8_t* letter_row = letter + (row * letter_width);
        for (int s1 = 0; s1 < scale; s1++) {
            
            uint8_t* buffer_cell = buffer_row;
            for (int col = 0; col < letter_width; col++) {
                uint8_t* letter_cell = letter_row + col;
                if (*letter_cell) {
                    for (int s2 = 0; s2 < scale; s2++) {
                        *buffer_cell = 0;
                        buffer_cell++;
                    }
                } else {
                    buffer_cell += scale;
                }
            }
            buffer_row += stride;
        }
    }

    /*
    // TODO: repeat in X and Y direction based on scale setting
    for (int h = 0; h < letter_height; h++) {
        int bufferRow = startIndex + (h * stride);
        for (int w = 0; w < letter_width; w++) {
            for (int s = 0; s < scale; s++) {
                if (letter[i]) {
                    buffer[ bufferRow + w ] = 255;
                }
                i++;
            }
        }
    }
    */
}

void annotate(char* text, int text_length, uint8_t* buffer, int startIndex, int stride) {
    int index = startIndex;
    int gap = 5;
    for (int i = 0; i < text_length; i++) {
        if (' ' <= text[i] && text[i] <= ':') {
            int val = text[i] - 32;
            _annotate(letters[val], buffer, index, stride);
        }
        // gap
        index += (letter_width * scale) + gap;
    }
}
